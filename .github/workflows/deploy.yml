name: Build, Scan & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    name: Security Scan & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate project structure
      run: |
        echo "‚úÖ Checking required files..."
        test -f Dockerfile && echo "‚úÖ Dockerfile" || exit 1
        test -f railway.json && echo "‚úÖ railway.json" || exit 1
        test -f requirements.txt && echo "‚úÖ requirements.txt" || exit 1
        test -f run.py && echo "‚úÖ run.py" || exit 1
        echo "üöÄ All files present, ready for build"

    # Build Docker image for testing and security scanning
    - name: Build Docker image
      run: |
        docker build -t harchamaq-backend:${{ github.sha }} .
        docker tag harchamaq-backend:${{ github.sha }} harchamaq-backend:latest

    # Test Docker image can start
    - name: Test Docker image
      env:
        FLASK_ENV: ${{ vars.FLASK_ENV }}
        DATABASE_HOST: ${{ vars.DATABASE_HOST }}
        DATABASE_USER: ${{ vars.DATABASE_USER }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        DATABASE_PORT: ${{ vars.DATABASE_PORT }}
        DATABASE_NAME: ${{ vars.DATABASE_NAME }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        ALLOWED_ORIGINS: ${{ vars.ALLOWED_ORIGINS }}
        LOG_LEVEL: ${{ vars.LOG_LEVEL }}
      run: |
        # Start container in background
        docker run -d --name test-container \
          -e FLASK_ENV="${FLASK_ENV}" \
          -e DATABASE_HOST="${DATABASE_HOST}" \
          -e DATABASE_USER="${DATABASE_USER}" \
          -e DATABASE_PASSWORD="${DATABASE_PASSWORD}" \
          -e DATABASE_PORT="${DATABASE_PORT}" \
          -e DATABASE_NAME="${DATABASE_NAME}" \
          -e SECRET_KEY="${SECRET_KEY}" \
          -e JWT_SECRET_KEY="${JWT_SECRET_KEY}" \
          -e ALLOWED_ORIGINS="${ALLOWED_ORIGINS}" \
          -e LOG_LEVEL="${LOG_LEVEL}" \
          -p 5000:5000 \
          harchamaq-backend:${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Check if container is running
        docker ps | grep test-container
        
        # Check if health endpoint responds (retry a few times)
        for i in {1..5}; do
          if curl -f http://localhost:5000/health; then
            echo "‚úÖ Health check passed"
            break
          fi
          echo "‚è≥ Attempt $i failed, retrying..."
          sleep 5
        done
        
        # Show container logs for debugging
        docker logs test-container
        
        # Stop test container
        docker stop test-container
        docker rm test-container

    # Trivy Security Scan - Filesystem
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    # Trivy Security Scan - Docker Image
    - name: Run Trivy image scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'harchamaq-backend:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    # Upload Trivy results to GitHub Security tab
    - name: Upload Trivy filesystem scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'
    
    - name: Upload Trivy image scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  deploy:
    name: Deploy to Railway
    needs: security-scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Railway CLI
      run: npm install -g @railway/cli

    - name: Deploy to Railway (Docker)
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: railway up --detach