name: Build, Scan & Deploy to Google Cloud Run

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  GCP_REGION: southamerica-east1
  SERVICE_NAME: harchaback
  ARTIFACT_REGISTRY_REPO: cloud-run-source-deploy
  IMAGE_NAME: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}

jobs:
  build-and-scan:
    name: Build, Scan & Push Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      id: auth
      uses: "google-github-actions/auth@v2"
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      id: docker_build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        outputs: type=docker,dest=/tmp/image.tar
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Install Trivy
      run: |
        wget https://github.com/aquasecurity/trivy/releases/download/v0.52.2/trivy_0.52.2_Linux-64bit.deb
        sudo dpkg -i trivy_0.52.2_Linux-64bit.deb

    - name: Load image into Docker
      run: docker load --input /tmp/image.tar

    - name: Run Trivy vulnerability scanner
      run: |
        trivy image --format sarif --output trivy-image-results.sarif --severity HIGH,CRITICAL ${{ env.IMAGE_NAME }}:${{ github.sha }}
      continue-on-error: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: "trivy-image-results.sarif"
        category: "trivy-image"

    - name: Login to Artifact Registry
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GCP_REGION }}-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: Push Image to Artifact Registry
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: |
        docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.IMAGE_NAME }}:latest

  deploy:
    name: Deploy to Google Cloud Run
    needs: build-and-scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    permissions:
      id-token: write

    steps:
    - name: Authenticate to Google Cloud
      id: auth
      uses: "google-github-actions/auth@v2"
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Deploy to Cloud Run
      uses: "google-github-actions/deploy-cloudrun@v2"
      with:
        service: ${{ env.SERVICE_NAME }}
        region: ${{ env.GCP_REGION }}
        image: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        env_vars: |
          FLASK_ENV=production
          ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
        secrets: |
          SECRET_KEY=SECRET_KEY:latest
          JWT_SECRET_KEY=JWT_SECRET_KEY:latest
          DATABASE_URL=DATABASE_URL:latest