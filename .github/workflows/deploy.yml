name: Build, Scan & Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Add permissions for security scanning and OIDC for GCP auth
permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write # Required for Workload Identity Federation

env:
  PROJECT_ID: cs-poc-fdmjkp4igeq5lr1cshpjpia # Reemplaza con tu ID de proyecto de GCP
  GCP_REGION: southamerica-east1 # Reemplaza con tu regi√≥n de Cloud Run
  SERVICE_NAME: harchaback # Nombre de tu servicio en Cloud Run
  ARTIFACT_REGISTRY_REPO: cloud-run-images # Nombre de tu repositorio de Artifact Registry

jobs:
  security-scan:
    name: Security Scan & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate project structure
      run: |
        echo "‚úÖ Checking required files..."
        test -f Dockerfile && echo "‚úÖ Dockerfile" || exit 1
        # Removido railway.json ya que no desplegamos en Railway
        test -f requirements.txt && echo "‚úÖ requirements.txt" || exit 1
        test -f run.py && echo "‚úÖ run.py" || exit 1
        echo "üöÄ All files present, ready for build"

    # Construye la imagen Docker (se usar√° para escanear y luego para desplegar)
    - name: Build Docker image
      run: |
        docker build -t harchamaq-backend:${{ github.sha }} .
        docker tag harchamaq-backend:${{ github.sha }} harchamaq-backend:latest

    # Test Docker image can start (without external DB connection)
    - name: Test Docker image build
      env:
        FLASK_ENV: testing
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        ALLOWED_ORIGINS: ${{ vars.ALLOWED_ORIGINS }}
      run: |
        echo "üê≥ Testing container startup..."
        docker run --rm \
          -e FLASK_ENV="${FLASK_ENV}" \
          -e SECRET_KEY="${SECRET_KEY}" \
          -e JWT_SECRET_KEY="${JWT_SECRET_KEY}" \
          -e ALLOWED_ORIGINS="${ALLOWED_ORIGINS}" \
          harchamaq-backend:${{ github.sha }} \
          python -c "import os; print('‚úÖ Container started successfully'); print('‚úÖ Environment variables loaded')"
        echo "‚úÖ Container test completed successfully"

    # Trivy Security Scan - Filesystem
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    # Trivy Security Scan - Docker Image
    - name: Run Trivy image scan
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: 'harchamaq-backend:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    # Upload Trivy results to GitHub Security tab (only if files exist)
    - name: Upload Trivy filesystem scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-fs-results.sarif') != ''
      continue-on-error: true
      with:
        sarif_file: 'trivy-fs-results.sarif'
        category: 'trivy-filesystem'
    
    - name: Upload Trivy image scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-image-results.sarif') != ''
      continue-on-error: true
      with:
        sarif_file: 'trivy-image-results.sarif'
        category: 'trivy-image'

  deploy:
    name: Deploy to Google Cloud Run
    needs: security-scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Solo desplegar en main
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Autenticaci√≥n con Google Cloud usando Workload Identity Federation
    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        project_id: ${{ env.PROJECT_ID }}
        # email de la cuenta de servicio creada para GitHub Actions
        workload_identity_provider: 'projects/510372916885/locations/global/workloadIdentityPools/github-pool/providers/gitoidc1' # Reemplaza con los tuyos
        service_account: 'github-actions-deployer@cs-poc-fdmjkp4igeq5lr1cshpjpia.iam.gserviceaccount.com' # Reemplaza con el email de tu SA

    # Configurar Docker para usar Artifact Registry
    - name: Set up Docker to use Artifact Registry
      run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

    # Construir y subir la imagen a Artifact Registry
    - name: Build and Push Docker Image to Artifact Registry
      run: |
        docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
        docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        docker tag ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
                   ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:latest
        docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:latest

    # Desplegar la imagen en Cloud Run
    - name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.SERVICE_NAME }}
        region: ${{ env.GCP_REGION }}
        image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        # Aqu√≠ puedes a√±adir otras configuraciones de Cloud Run, por ejemplo:
        # env_vars: |
        #   SECRET_KEY=${{ secrets.SECRET_KEY }}
        #   JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
        #   ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
        #   DATABASE_URL=${{ secrets.DATABASE_URL }}
        # no_traffic: true # Si quieres un despliegue azul/verde

